// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init



generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = "mongodb://localhost:27017/nse"
}

model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// Define the data model
model Stock {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  symbol    String
  date      DateTime
  prevClose Float
  openPrice Float
  highPrice Float
  lowPrice  Float
  lastPrice Float
  closePrice Float
  ttlTrdQnty Int
  turnoverLacs Float
  noOfTrades Int
  delivQty  Int
  delivPer  Float
  daily     Float
  yearly    Float
}



model User {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]

 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}